// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitmentManagementSystem.API.Data;

#nullable disable

namespace RecruitmentManagementSystem.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004130310_newAdded")]
    partial class newAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CVStorage", b =>
                {
                    b.Property<Guid>("CVStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CVStorageId");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CVStorages");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateProfile", b =>
                {
                    b.Property<Guid>("CandidateProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CandidateProfiles");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateSkill", b =>
                {
                    b.Property<Guid>("CandidateSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ExperienceYears")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateSkillId");

                    b.HasIndex("CandidateProfileId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateSocial", b =>
                {
                    b.Property<Guid>("CandidateSocialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SocialPlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CandidateSocialsId");

                    b.HasIndex("CandidateProfileId");

                    b.HasIndex("SocialPlatformId");

                    b.ToTable("CandidateSocials");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Education", b =>
                {
                    b.Property<Guid>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DegreeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PercentageScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EducationId");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidateProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DurationYears")
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExperienceId");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpeningsCount")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobDescriptionId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.JobDescription", b =>
                {
                    b.Property<Guid>("JobDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumExperienceReq")
                        .HasColumnType("int");

                    b.Property<string>("Responsibilty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobDescriptionId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.JobType", b =>
                {
                    b.Property<Guid>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTypeId");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.SocialPlatform", b =>
                {
                    b.Property<Guid>("SocialPlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialPlatformId");

                    b.ToTable("SocialPlatforms");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CVStorage", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.CandidateProfile", "CandidateProfile")
                        .WithMany("CVStorages")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateProfile", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.User", "User")
                        .WithOne("CandidateProfile")
                        .HasForeignKey("RecruitmentManagementSystem.API.Models.CandidateProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateSkill", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.CandidateProfile", "CandidateProfile")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagementSystem.API.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateSocial", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.CandidateProfile", "CandidateProfile")
                        .WithMany("CandidateSocials")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagementSystem.API.Models.SocialPlatform", "SocialPlatform")
                        .WithMany()
                        .HasForeignKey("SocialPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");

                    b.Navigation("SocialPlatform");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Education", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.CandidateProfile", "CandidateProfile")
                        .WithMany("Educations")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Experience", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.CandidateProfile", "CandidateProfile")
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.Job", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentManagementSystem.API.Models.JobDescription", "JobDescription")
                        .WithMany()
                        .HasForeignKey("JobDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.JobDescription", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.User", b =>
                {
                    b.HasOne("RecruitmentManagementSystem.API.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.CandidateProfile", b =>
                {
                    b.Navigation("CVStorages");

                    b.Navigation("CandidateSkills");

                    b.Navigation("CandidateSocials");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.User", b =>
                {
                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("RecruitmentManagementSystem.API.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
